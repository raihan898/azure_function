import os
import logging
import azure.functions as func
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
import xmltodict
import csv

def convert_xml_to_csv(xml_content):
    try:
        # Convert XML to a dictionary
        xml_dict = xmltodict.parse(xml_content)

        # Check if the dictionary has the expected structure
        if "items" in xml_dict:
            items = xml_dict["items"]["item"]
            csv_data = []

            # If there's only one item, it will be a dictionary
            if isinstance(items, dict):
                csv_data.append([items.get("name", ""), items.get("value", "")])
            else:
                # If there are multiple items, items will be a list of dictionaries
                for item in items:
                    csv_data.append([item.get("name", ""), item.get("value", "")])

            return csv_data
        else:
            raise ValueError("XML structure is not as expected.")

    except Exception as e:
        raise ValueError(f"Error parsing XML: {str(e)}")

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    # Get parameters from query string
    xml_blob_name = req.params.get('xml_blob_name')
    csv_blob_name = req.params.get('csv_blob_name')
    source_container_name = req.params.get('source_container_name')

    if not xml_blob_name or not csv_blob_name or not source_container_name:
        return func.HttpResponse(
             "Please provide 'xml_blob_name', 'source_container_name' and 'csv_blob_name' parameters.",
             status_code=400
        )

    try:
        connection_string = 'DefaultEndpointsProtocol=https;AccountName=azurefunctionstorage12;AccountKey=44fx217rB7oyNcMCJzQl2smrfld3nPNNTpTqgLV/B++0aYFQLcACudnLVc8kobee7Yn27JwgWUhU+AStcmCp3w==;EndpointSuffix=core.windows.net'
        # Connect to Azure Blob Storage
        blob_service_client = BlobServiceClient.from_connection_string (connection_string)
        
        blob_container_client = blob_service_client.get_container_client (source_container_name)
        blob_client = blob_container_client.get_blob_client (xml_blob_name)

        # Download the XML file content
        xml_content = blob_client.download_blob().readall()

        # Convert XML to CSV
        csv_data = convert_xml_to_csv(xml_content.decode('utf-8'))

        # Upload CSV to Blob Storage

        csv_container_client = blob_service_client.get_container_client (source_container_name)
        csv_blob_client = csv_container_client.get_blob_client (csv_blob_name)

        csv_content = '\n'.join([','.join(row) for row in csv_data])
        csv_blob_client.upload_blob(csv_content, overwrite=True)

        return func.HttpResponse(f"XML to CSV conversion successful. CSV file '{csv_blob_name}' uploaded.")

    except Exception as e:
        return func.HttpResponse(f"An error occurred: {str(e)}", status_code=500)
